# -*- coding: utf-8 -*-
"""nn_food_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X0R3GFh1IhFJo-Bqr_2lJo2JS-LFUe5P
"""

import zipfile
zipfile.ZipFile('10_food_classes_10_percent.zip').extractall('.')

import os
os.listdir('10_food_classes_10_percent')

import tensorflow as tf
import matplotlib.pyplot as plt

from random import shuffle
img_size = (224, 224)
batch_size = 32

train_dir = '10_food_classes_10_percent/train'
test_dir = '10_food_classes_10_percent/test'

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

print('Training images:')
train_data = train_datagen.flow_from_directory(train_dir,
                                               target_size=img_size,
                                               batch_size=batch_size,
                                               class_mode='categorical',
                                               shuffle=True)
print('Testing images:')
test_data = test_datagen.flow_from_directory(test_dir,
                                             target_size=img_size,
                                             batch_size=batch_size,
                                             class_mode='categorical',
                                             shuffle=True)

import matplotlib.image as mpimg


def view_random_image(target_dir):
  """
  Views a random image from a target directory.
  """
  target_folder = target_dir
  random_image = random.sample(os.listdir(target_folder), 1)


  img = mpimg.imread(target_folder + "/" + random_image[0])
  plt.imshow(img)
  plt.title(random_image[0])
  plt.axis("off");

  print(f"Image shape: {img.shape}")

import random
view_random_image('10_food_classes_10_percent/train/chicken_curry')

from tensorflow.keras.applications import ResNet50V2, EfficientNetB0, VGG16,VGG19
# resNet_model = ResNet50V2(include_top=False)
# efficientNet_model = EfficientNetB0(include_top=False)
vgg_model = VGG16()

model = tf.keras.Sequential()
for layer in vgg_model.layers[0:-1]:
  model.add(layer)
model.summary()

for layer in model.layers:
  layer.trainable = False
model.summary()

model.add(tf.keras.layers.Dense(10, activation='softmax'))
model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.Adam(),
              metrics=['accuracy'])

history = model.fit(train_data,
                    epochs=5,
                    validation_data=test_data,
                    )

model.evaluate(test_data)

